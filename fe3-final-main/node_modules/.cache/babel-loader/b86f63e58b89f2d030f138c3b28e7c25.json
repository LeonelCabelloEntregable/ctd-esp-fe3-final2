{"ast":null,"code":"/**\n * @remix-run/router v1.5.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, detectErrorBoundary, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        hasErrorBoundary: detectErrorBoundary(route),\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, detectErrorBoundary, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      const starParam = params[star]; // Apply the splat\n\n      return starParam;\n    }\n\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n\n      return param;\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = route => Boolean(route.hasErrorBoundary); //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let detectErrorBoundary = init.detectErrorBoundary || defaultDetectErrorBoundary; // Routes keyed by ID\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, detectErrorBoundary, undefined, manifest);\n  let inFlightDataRoutes; // Config driven behavior flags\n\n  let future = _extends({\n    v7_normalizeFormMethod: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, future, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n\n\n    if (isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => fetchControllers.set(rf.key, pendingNavigationController));\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, future, opts, true);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, detectErrorBoundary, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, detectErrorBoundary, router.basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, router.basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, manifest, detectErrorBoundary, router.basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let detectErrorBoundary = (opts == null ? void 0 : opts.detectErrorBoundary) || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(routes, detectErrorBoundary, undefined, manifest);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, future, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: future.v7_normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  let defaultShouldRevalidate = // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push(_extends({\n        key\n      }, f, {\n        matches: null,\n        match: null\n      }));\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, detectErrorBoundary, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary(_extends({}, routeToUpdate)),\n    lazy: undefined\n  });\n}\n\nasync function callLoaderOrAction(type, request, match, matches, manifest, detectErrorBoundary, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, detectErrorBoundary, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else {\n      invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n      result = await runHandler(handler);\n    }\n\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","detectErrorBoundary","parentPath","manifest","treePath","id","join","children","indexRoute","hasErrorBoundary","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","array","isLastSegment","star","starParam","keyMatch","optional","param","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultDetectErrorBoundary","Boolean","createRouter","dataRoutes","inFlightDataRoutes","future","v7_normalizeFormMethod","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","fetcherSubmission","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","rf","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","_window","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","all","f","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","toUpperCase","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","isStaticRequest","resultType","onReject","runHandler","handler","activeMatches","resolvedLocation","protocol","isSameBasename","contentType","text","isDeferredData","_result$init","_result$init2","deferred","body","URLSearchParams","File","name","foundError","newLoaderData","mergedLoaderData","eligibleMatches","reverse","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches","UNSAFE_DeferredData","UNSAFE_convertRoutesToDataRoutes","UNSAFE_getPathContributingMatches","UNSAFE_invariant","UNSAFE_warning"],"sources":["D:/FINAL FRONTEND 3/TEMPLATE V2/fe3-final-main/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.5.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, detectErrorBoundary, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        hasErrorBoundary: detectErrorBoundary(route),\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, detectErrorBoundary, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      const starParam = params[star]; // Apply the splat\n\n      return starParam;\n    }\n\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n\n      return param;\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = route => Boolean(route.hasErrorBoundary); //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let detectErrorBoundary = init.detectErrorBoundary || defaultDetectErrorBoundary; // Routes keyed by ID\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, detectErrorBoundary, undefined, manifest);\n  let inFlightDataRoutes; // Config driven behavior flags\n\n  let future = _extends({\n    v7_normalizeFormMethod: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, future, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          deleteBlocker(blockerKey);\n          updateState({\n            blockers: new Map(state.blockers)\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n\n\n    if (isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = _extends({\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission);\n\n      loadingNavigation = navigation;\n    } // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n\n    let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n      formMethod: loadingNavigation.formMethod,\n      formAction: loadingNavigation.formAction,\n      formData: loadingNavigation.formData,\n      formEncType: loadingNavigation.formEncType\n    } : undefined;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(rf => fetchControllers.set(rf.key, pendingNavigationController));\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, future, opts, true);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, detectErrorBoundary, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true\n      });\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission, {\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = _extends({\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    }, submission, {\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true\n    });\n\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, detectErrorBoundary, router.basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp) {\n    var _window;\n\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType,\n      formData\n    } = state.navigation;\n\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      };\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, submission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, router.basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, manifest, detectErrorBoundary, router.basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let detectErrorBoundary = (opts == null ? void 0 : opts.detectErrorBoundary) || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(routes, detectErrorBoundary, undefined, manifest);\n  let basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, future, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  let submission;\n\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: future.v7_normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  let defaultShouldRevalidate = // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push(_extends({\n        key\n      }, f, {\n        matches: null,\n        match: null\n      }));\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push(_extends({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, detectErrorBoundary, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary(_extends({}, routeToUpdate)),\n    lazy: undefined\n  });\n}\n\nasync function callLoaderOrAction(type, request, match, matches, manifest, detectErrorBoundary, basename, isStaticRequest, isRouteRequest, requestContext) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: requestContext\n    }), abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, detectErrorBoundary, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else {\n      invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n      result = await runHandler(handler);\n    }\n\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n        let resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n        invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}